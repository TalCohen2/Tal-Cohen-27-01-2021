{"version":3,"sources":["./src/app/manage/manage.component.ts","./src/app/manage/manage.component.html","./src/app/compose/compose.component.ts","./src/app/compose/compose.component.html","./src/app/manage/message/message.component.ts","./src/app/manage/message/message.component.html","./src/environments/environment.ts","./src/app/token.interceptor.ts","./src/app/manage/message-list/message-item/message-item.component.ts","./src/app/manage/message-list/message-item/message-item.component.html","./src/app/services/api.service.ts","./src/app/services/messages.service.ts","./src/app/auth/auth.component.ts","./src/app/auth/auth.component.html","./src/app/auth/auth.guard.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/manage/message-list/message-list.component.ts","./src/app/manage/message-list/message-list.component.html","./src/app/services/auth.service.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;ICO5C,yEACE;IAAA,oEACA;IAAA,oEAAG;IAAA,gFAAqB;IAAA,4DAAI;IAC9B,4DAAM;;;ADDL,MAAM,eAAe;IAG1B,YAAoB,eAA+B;QAA/B,oBAAe,GAAf,eAAe,CAAgB;IACnD,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;IACrC,CAAC;;8EARU,eAAe;+FAAf,eAAe;QCT5B,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,8EAAqC;QACvC,4DAAM;QACN,yEACE;QAAA,oFAAuD;QACvD,2GAGM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;;;QARiD,0DAAuD;QAAvD,2JAAuD;QAElG,0DAAgC;QAAhC,kFAAgC;;6FDE/B,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;;;;;;;;;;;;;AERD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwE;AAChC;;;;;;;ICcpC,wEAA2D;IAAA,uDAAK;IAAA,4DAAI;;;IAAT,0DAAK;IAAL,qEAAK;;;IADlE,0EACE;IAAA,gHAAoE;IACtE,4DAAM;;;IADwC,0DAAa;IAAb,sFAAa;;;IAIzD,uEAA0C;IAAA,iEAAM;IAAA,4DAAO;;;IAErD,qEAA0B;;ADTzB,MAAM,gBAAgB;IAO3B,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAL3C,eAAU,GAAY,EAAE,CAAC,CAAC,gCAAgC;QAG1D,kBAAa,GAAW,KAAK,CAAC,CAAC,4DAA4D;QAGhG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC,MAAa,EAAC,EAAE;YAC5F,IAAG,CAAC,MAAM,EAAE;gBACV,IAAI,CAAC,SAAS,EAAE,CAAC;aAClB;iBAAM;gBACL,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC9B;YACD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC7B,CAAC,CAAC;IACJ,CAAC;IAED,QAAQ,KAAU,CAAC;IAEnB,QAAQ;QACN,IAAG,CAAC,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAI,IAAI,GAAW,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;YAC/C,IAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;aAChD;iBAAM,IAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBAC5C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;aACjD;iBAAM,IAAG,IAAI,CAAC,UAAU,GAAC,CAAC,EAAE;gBAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;aAC1D;iBAAM,IAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,GAAC,EAAE,EAAE;gBAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;aACnE;YACD,IAAG,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAE,EAAE,EAAE;gBAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;aACrD;YACD,IAAG,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAE,EAAE,EAAE;gBAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;aACrD;YACD,IAAG,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBAC1B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC1B,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aACxC;SACF;IACH,CAAC;IAED,SAAS;QACP,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;;gFArDU,gBAAgB;gGAAhB,gBAAgB;6EAGI,qDAAM;;;;;QCfvC,6EACE;QADqB,4IAAY,cAAU,IAAC;QAC5C,yEAAQ;QAAA,sEAAW;QAAA,4DAAS;QAC5B,yEACE;QAAA,2EAAwB;QAAA,sEAAW;QAAA,4DAAQ;QAC3C,sEACF;QAAA,4DAAM;QACN,yEACE;QAAA,2EAAqB;QAAA,mEAAO;QAAA,4DAAQ;QACpC,uEACF;QAAA,4DAAM;QACN,0EACE;QAAA,4EAAqB;QAAA,mEAAO;QAAA,4DAAQ;QACpC,0EAA0E;QAC5E,4DAAM;QACN,8GAEM;QACN,8EAA8F;QAAjD,yIAAS,eAAW,IAAC;QAA4B,iEAAK;QAAA,4DAAS;QAC5G,8EACE;QAAA,iHAAuD;QACvD,2MAEc;QAChB,4DAAS;QACX,4DAAO;;;QAV2B,2DAAuB;QAAvB,uFAAuB;QAGY,0DAA0B;QAA1B,uFAA0B;QACpC,0DAA0B;QAA1B,uFAA0B;QAC1E,0DAAsB;QAAtB,oFAAsB;;6FDPpB,gBAAgB;cAN5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;0HAKyC,WAAW;kBAAlD,uDAAS;mBAAC,aAAa,EAAC,EAAC,IAAI,EAAC,qDAAM,EAAC;;;;;;;;;;;;;;AEfxC;AAAA;AAAA;AAAA;AAAA;AAA6D;;;;AAWtD,MAAM,gBAAgB;IAM3B,YAAoB,eAA+B,EAAU,MAAa,EAAS,KAAoB;QAAnF,oBAAe,GAAf,eAAe,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAO;QAAS,UAAK,GAAL,KAAK,CAAe;QAJhG,YAAO,GAAW,EAAC,OAAO,EAAC,EAAE,EAAC,OAAO,EAAC,EAAE,EAAC,QAAQ,EAAC,CAAC,EAAC,UAAU,EAAC,CAAC,EAAC,CAAC,CAAC,2BAA2B;QAKnG,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC,SAAS,EAAC,EAAE;YACzF,IAAG,IAAI,CAAC,OAAO,CAAC,SAAS,IAAE,SAAS,EAAE;gBACpC,IAAI,CAAC,SAAS,EAAE,CAAC;aAClB;QACH,CAAC,CAAC;IACH,CAAC;IAGF,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAa,EAAC,EAAE;YAC3C,IAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAClE,IAAG,WAAW,EAAE;gBACd,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC;aAC5B;iBAAM;gBACL,IAAI,CAAC,SAAS,EAAE,CAAC;aAClB;QACH,CAAC,CAAC;QACF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC;IAC1D,CAAC;IAED,SAAS;QACP,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAC,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;IACzD,CAAC;IAED,WAAW;QACT,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;IACvC,CAAC;;gFAjCU,gBAAgB;gGAAhB,gBAAgB;QCX7B,yEAAmD;QAAtB,qIAAS,eAAW,IAAC;QAAC,4DAAM;QACzD,yEACE;QAAA,yEACE;QAAA,0EAA6F;QAAtB,sIAAS,eAAW,IAAC;QAAC,4DAAO;QACpG,wEAAwB;QAAA,uDAAmB;QAAA,4DAAK;QAClD,4DAAM;QACN,yEACE;QAAA,oEAAG;QAAA,uDAA4F;QAAA,4DAAI;QACnG,oEAAG;QAAA,wDAAmB;QAAA,4DAAI;QAC5B,4DAAM;QACR,4DAAM;;QANsB,0DAAmB;QAAnB,oFAAmB;QAGxC,0DAA4F;QAA5F,oLAA4F;QAC5F,0DAAmB;QAAnB,oFAAmB;;6FDGb,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;;;;;;;;;;;;;;AEVD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAA2C;;;AAWpC,MAAM,gBAAgB;IAE3B,YAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;IAAG,CAAC;IAE/C,SAAS,CAAC,OAA6B,EAAE,IAAiB;QACxD,IAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YACzB,IAAI,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC;gBAC9B,UAAU,EAAE;oBACV,aAAa,EAAE,UAAU,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;iBAClD;aACF,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;SACjC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;;gFAdU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB;6FAAhB,gBAAgB;cAD5B,wDAAU;;;;;;;;;;;;;;ACVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyD;;;;;AAQlD,MAAM,oBAAoB;IAK/B,YAAoB,eAA+B;QAA/B,oBAAe,GAAf,eAAe,CAAgB;QAF1C,WAAM,GAAW,IAAI,CAAC,CAAC,sEAAsE;IAE/C,CAAC;IAExD,QAAQ;IACR,CAAC;IAED,aAAa,CAAC,KAAW;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC7D,CAAC;;wFAbU,oBAAoB;oGAApB,oBAAoB;QCRjC,yEACE;QAAA,sEACE;QAAA,wEAAiB;QAAA,uDAAmB;QAAA,4DAAK;QACzC,2EAA0B;QAAA,uDAAuC;;QAAA,4DAAQ;QAC3E,4DAAM;QACN,2EAA0B;QAAA,uDAA6E;QAAA,4DAAQ;QAC/G,0EAAsG;QAAhC,gJAAS,yBAAqB,IAAC;QAAC,4DAAO;QAC/G,4DAAM;;QAPgC,6FAAgC;QAEjD,0DAAmB;QAAnB,oFAAmB;QACV,0DAAuC;QAAvC,mKAAuC;QAEzC,0DAA6E;QAA7E,qKAA6E;;6FDG5F,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;iIAGU,OAAO;kBAAf,mDAAK;YACG,MAAM;kBAAd,mDAAK;;;;;;;;;;;;;;AEXR;AAAA;AAAA;AAAA;AAA2C;;;AAOpC,MAAM,UAAU;IAKrB,YAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAH3B,qBAAgB,GAAU,UAAU,CAAC,CAAC,iCAAiC;QACvE,kBAAa,GAAU,OAAO,CAAC,+BAA8B;IAE/B,CAAC;IAEhC,YAAY,CAAC,UAAkB;QACpC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,gBAAgB,eAAe,EAAC,UAAU,CAAC,CAAC;IACjF,CAAC;IAEM,aAAa,CAAC,WAAc;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAM,GAAG,IAAI,CAAC,gBAAgB,gBAAgB,EAAC,EAAC,MAAM,EAAC,WAAW,EAAC,CAAC,CAAC;IAC9F,CAAC;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,GAAG,IAAI,CAAC,gBAAgB,cAAc,CAAC,CAAC;IACpE,CAAC;IAEM,SAAS,CAAC,EAAS,EAAC,QAAe;QACxC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,GAAG,IAAI,CAAC,aAAa,QAAQ,EAAC;YACvD,EAAE,EAAC,EAAE;YACL,QAAQ,EAAC,QAAQ;SAClB,CAAC;IACJ,CAAC;IAEM,eAAe,CAAC,EAAS,EAAC,QAAe;QAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,aAAa,EAAC;YAC5C,EAAE,EAAE,EAAE;YACN,QAAQ,EAAE,QAAQ;SACnB,CAAC;IACJ,CAAC;;oEA/BU,UAAU;6FAAV,UAAU,WAAV,UAAU,mBAFT,MAAM;6FAEP,UAAU;cAHtB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAGZ;AACA;;;;AAMxB,MAAM,eAAe;IAQ1B,YAAoB,UAAqB,EAAU,WAAuB;QAAtD,eAAU,GAAV,UAAU,CAAW;QAAU,gBAAW,GAAX,WAAW,CAAY;QANlE,aAAQ,GAA2C,EAAC,MAAM,EAAC,EAAE,EAAC,UAAU,EAAC,EAAE,EAAC,CAAC,CAAG,8DAA8D;QAC9I,WAAM,GAAW,IAAI,CAAC,CAAC,yFAAyF;QACjH,oBAAe,GAAG,IAAI,4CAAO,EAA2C,CAAC,CAAC,6DAA6D;QACvI,0BAAqB,GAAG,IAAI,4CAAO,EAAU,CAAC,CAAC,oDAAoD;QACnG,6BAAwB,GAAG,IAAI,4CAAO,EAAU,CAAC,CAAC,qDAAqD;IAEhC,CAAC;IAExE,YAAY,CAAC,UAAkB;QACpC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,EAAC,EAAE;YAC3D,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvC,kDAAI,CAAC,IAAI,CAAC;gBACR,sCAAsC;gBACtC,QAAQ,EAAE,SAAS;gBACnB,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,4BAA4B;gBACnC,iBAAiB,EAAE,KAAK;gBACxB,KAAK,EAAE,IAAI;aACZ,CAAC;QACJ,CAAC,EAAC,CAAC,KAAK,EAAC,EAAE;YACT,IAAI,YAAY,GAAG,yBAAyB,CAAC;YAC7C,IAAG,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE;gBACrB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;gBAC1B,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aAC9C;iBAAM;gBACL,IAAG,OAAO,KAAK,CAAC,KAAK,IAAE,QAAQ,EAAE;oBAC7B,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;iBAC9B;gBACD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aAClD;QACH,CAAC,CAAC;IACJ,CAAC;IAEM,aAAa,CAAC,SAAgB;QACnC,kDAAI,CAAC,IAAI,CAAC;YACR,sCAAsC;YACtC,KAAK,EAAE,eAAe;YACtB,IAAI,EAAE,mCAAmC;YACzC,IAAI,EAAE,SAAS;YACf,gBAAgB,EAAE,IAAI;YACtB,kBAAkB,EAAE,SAAS;YAC7B,iBAAiB,EAAE,MAAM;YACzB,iBAAiB,EAAE,iBAAiB;SACrC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACjB,IAAI,MAAM,CAAC,WAAW,EAAE;gBACtB,IAAI,UAAU,GAAG;oBACf,SAAS,EAAE,SAAS;oBACpB,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM;iBAC1C;gBACD,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;oBAC1D,IAAI,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAuD,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,IAAE,SAAS,CAAC,CAAC;oBACxJ,IAAG,YAAY,IAAE,CAAC,CAAC,EAAE;wBACnB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAuD,CAAC,CAAC,MAAM,CAAC,YAAY,EAAC,CAAC,CAAC,CAAC;wBACzG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACtC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;wBAC3C,kDAAI,CAAC,IAAI,CAAC;4BACR,sCAAsC;4BACtC,QAAQ,EAAE,SAAS;4BACnB,IAAI,EAAE,SAAS;4BACf,KAAK,EAAE,8BAA8B;4BACrC,iBAAiB,EAAE,KAAK;4BACxB,KAAK,EAAE,IAAI;yBACZ,CAAC;qBACH;gBACH,CAAC,EAAC,CAAC,GAAG,EAAC,EAAE;oBACP,IAAI,YAAY,GAAG,yBAAyB,CAAC;oBAC7C,IAAG,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE;wBACnB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;wBAC1B,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;qBAClC;yBAAM,IAAG,OAAO,GAAG,CAAC,KAAK,IAAE,QAAQ,EAAE;wBACpC,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC;qBAC1B;oBACD,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;gBACxC,CAAC,CAAC;aACH;QACH,CAAC,CAAC;IACJ,CAAC;IAEM,WAAW;QAChB,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,EAAC,EAAE;YAC9C,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;YACvB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,EAAC,CAAC,GAAG,EAAC,EAAE;YACP,IAAI,YAAY,GAAU,sBAAsB,CAAC;YACjD,IAAG,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE;gBACnB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;gBAC1B,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;aAClC;iBAAM,IAAG,OAAO,GAAG,CAAC,KAAK,IAAE,QAAQ,EAAE;gBACpC,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC;aAC1B;YACD,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,mBAAmB,CAAC,MAAc;QACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,aAAa,GAAU,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC;QACxD,IAAI,YAAY,GAAG;YACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,aAA8D,CAAC,CAAC,KAAK,EAAE;YAC/F,MAAM,EAAE,MAAM;SACf;QACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IAEM,cAAc,CAAC,SAAgB;QACpC,IAAI,aAAa,GAAU,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC;QAC7D,OAAO,IAAI,CAAC,QAAQ,CAAC,aAA8D,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,IAAE,SAAS,CAAC,CAAC;IACrI,CAAC;IAEO,kBAAkB,CAAC,OAAc;QACvC,kDAAI,CAAC,IAAI,CAAC;YACR,sCAAsC;YACtC,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,SAAS;YAChB,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;;8EA1HU,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFd,MAAM;6FAEP,eAAe;cAH3B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwE;AAChC;;;;;;;ICStC,yEACE;IAAA,4EAAkC;IAAA,gFAAqB;IAAA,4DAAQ;IAC/D,uEACF;IAAA,4DAAM;;;IAEJ,wEAA2D;IAAA,uDAAK;IAAA,4DAAI;;;IAAT,0DAAK;IAAL,qEAAK;;;IADlE,0EACE;IAAA,6GAAoE;IACtE,4DAAM;;;IADwC,0DAAa;IAAb,sFAAa;;;IAKzD,uEAA2C;IAAA,iEAAM;IAAA,4DAAO;;;IAEtD,qEAA0B;;ADZzB,MAAM,aAAa;IASxB,YAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;QAL3C,YAAO,GAAW,IAAI,CAAC,CAAC,0DAA0D;QAClF,mBAAc,GAAW,KAAK,CAAC,CAAC,uEAAuE;QACvG,eAAU,GAAY,EAAE,CAAC,CAAC,4BAA4B;QAIpD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,QAAe,EAAC,EAAE;YAC9E,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC;IACJ,CAAC;IAED,QAAQ;IACR,CAAC;IAED,QAAQ;QACN,IAAG,CAAC,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,IAAI,GAAgE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;YACjG,IAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACrB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;aAC/C;iBAAM,IAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,GAAC,CAAC,EAAE;gBACzD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;aACjE;iBAAM,IAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,GAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;aAC5D;YACD,IAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAE,EAAE,EAAE;gBAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;aAC9C;iBAAM,IAAG,CAAC,IAAI,CAAC,OAAO,EAAC;gBACtB,IAAG,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,oBAAoB,IAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;oBAC5F,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;iBACrD;gBACD,IAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;oBACjC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;iBAClE;gBACD,IAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;oBACjC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;iBAC7E;gBACD,IAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;oBACjC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;iBAC7E;gBACD,IAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAC,CAAC,EAAE;oBACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;iBAClE;aACF;YACD,IAAG,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBAC1B,IAAG,IAAI,CAAC,OAAO,EAAE;oBACf,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACnD;qBAAM;oBACL,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACtD;aACF;iBAAM;gBACL,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;aAC7B;SACF;IACH,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,SAAS;QACP,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;QAC3C,IAAG,CAAC,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,KAAK,EAAE,CAAC;SACxD;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;IAC9B,CAAC;;0EA9EU,aAAa;6FAAb,aAAa;6EAEI,qDAAM;;;;;QCZpC,6EACE;QADqB,yIAAY,cAAU,IAAC;QAC5C,yEAAQ;QAAA,uDAAkC;QAAA,4DAAS;QACnD,yEACE;QAAA,2EAAoB;QAAA,6DAAE;QAAA,4DAAQ;QAC9B,sEACF;QAAA,4DAAM;QACN,yEACE;QAAA,2EAAsB;QAAA,oEAAQ;QAAA,4DAAQ;QACtC,uEACF;QAAA,4DAAM;QACN,2GAGM;QACN,2GAEM;QACN,6EAA+F;QAAjD,sIAAS,cAAU,IAAC;QAA6B,wDAC/D;QAAA,4DAAS;QACzC,8EACE;QAAA,8GAAwD;QACxD,wMAEc;QAChB,4DAAS;QACX,4DAAO;;;QAxBG,0DAAkC;QAAlC,mGAAkC;QASjB,0DAAc;QAAd,8EAAc;QAIP,0DAAuB;QAAvB,uFAAuB;QAGY,0DAA2B;QAA3B,wFAA2B;QAAC,0DAC/D;QAD+D,sHAC/D;QACyB,0DAA2B;QAA3B,wFAA2B;QAC3E,0DAAuB;QAAvB,qFAAuB;;6FDVrB,aAAa;cALzB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,uBAAuB;gBACpC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;kHAGsC,QAAQ;kBAA5C,uDAAS;mBAAC,UAAU,EAAC,EAAC,IAAI,EAAC,qDAAM,EAAC;;;;;;;;;;;;;;AEZrC;AAAA;AAAA;AAAA;AAAA;AAA2C;;;;AAQpC,MAAM,SAAS;IAEpB,YAAoB,WAAuB,EAAS,MAAa;QAA7C,gBAAW,GAAX,WAAW,CAAY;QAAS,WAAM,GAAN,MAAM,CAAO;IAAI,CAAC;IAEtE,WAAW,CAAC,KAA6B,EAAE,KAA0B;;QACnE,+CAA+C;QAC/C,IAAI,YAAY,SAAG,KAAK,CAAC,WAAW,0CAAE,IAAI,CAAC;QAC3C,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;QACxC,IAAG,UAAU,EAAE;YACb,IAAG,YAAY,IAAE,MAAM,EAAE;gBACvB,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;aAChD;iBAAM;gBACL,OAAO,IAAI,CAAC;aACb;SACF;aAAM;YACL,IAAG,YAAY,IAAE,MAAM,EAAE;gBACvB,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aAC7C;SACF;IACH,CAAC;;kEArBU,SAAS;4FAAT,SAAS,WAAT,SAAS,mBAFR,MAAM;6FAEP,SAAS;cAHrB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;AAQnC,MAAM,YAAY;IAGvB;QAFA,UAAK,GAAG,kBAAkB,CAAC;IAG3B,CAAC;;wEAJU,YAAY;4FAAZ,YAAY;QCRzB,wEAAyB;QACzB,2EAA+B;;6FDOlB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACkC;AACnB;AACX;AAEE;AACa;AACG;AACH;AACwB;AACd;AAC2B;AAC3C;AAEF;AACU;AACR;AACC;;AAgChD,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAZT;QACT,iEAAU;QACV,2EAAe;QACf,mEAAW;QACX;YACE,OAAO,EAAE,sEAAiB;YAC1B,QAAQ,EAAE,oEAAgB;YAC1B,KAAK,EAAE,IAAI;SACZ;KACF,YAfQ;YACP,uEAAa;YACb,oEAAgB;YAChB,qEAAgB;YAChB,0DAAW;SACZ;mIAaU,SAAS,mBA3BlB,2DAAY;QACZ,wEAAe;QACf,2EAAgB;QAChB,wEAAe;QACf,gGAAoB;QACpB,mFAAgB;QAChB,8GAAoB;QACpB,mEAAa,aAGb,uEAAa;QACb,oEAAgB;QAChB,qEAAgB;QAChB,0DAAW;6FAcF,SAAS;cA7BrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,wEAAe;oBACf,2EAAgB;oBAChB,wEAAe;oBACf,gGAAoB;oBACpB,mFAAgB;oBAChB,8GAAoB;oBACpB,mEAAa;iBACd;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,qEAAgB;oBAChB,0DAAW;iBACZ;gBACD,SAAS,EAAE;oBACT,iEAAU;oBACV,2EAAe;oBACf,mEAAW;oBACX;wBACE,OAAO,EAAE,sEAAiB;wBAC1B,QAAQ,EAAE,oEAAgB;wBAC1B,KAAK,EAAE,IAAI;qBACZ;iBACF;gBACD,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACjDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;;;;;;ICC3D,qEAA8F;;;;;IAE9F,wEACE;IAAA,wEACE;IAAA,0EAAqE;IAAA,0EAAe;IAAA,4DAAI;IAC1F,4DAAK;IACL,wEACE;IAAA,2EAAmE;IAAA,0EAAe;IAAA,4DAAI;IACxF,4DAAK;IACL,qEACE;IAAA,yEAAsB;IAAnB,2SAAkB;IAAC,mEAAO;IAAA,4DAAI;IACnC,4DAAK;IACP,4DAAK;;;;IATC,0DAAuC;IAAvC,wJAAuC;IAGvC,0DAAsC;IAAtC,wJAAsC;;;IAU1C,yEACE;IAAA,yEACE;IAAA,oEAAG;IAAA,yEAAc;IAAA,4DAAI;IACvB,4DAAK;IACP,4DAAK;;ADXF,MAAM,eAAe;IAK1B,YAAoB,WAAuB,EAAS,MAAa;QAA7C,gBAAW,GAAX,WAAW,CAAY;QAAS,WAAM,GAAN,MAAM,CAAO;QAF1D,eAAU,GAAW,KAAK,CAAC,CAAC,uBAAuB;QAGxD,uBAAuB;QACvB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC;QACtC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,MAAc,EAAE,EAAE;YACnF,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QAC3B,CAAC,CAAC;IACJ,CAAC;IAED,QAAQ;IACR,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC;;8EAtBU,eAAe;+FAAf,eAAe;QCV5B,yEACE;QAAA,6GAA8F;QAE9F,0GAUK;QAGL,uMAMc;QAChB,4DAAM;;;QAtBiE,0DAAgB;QAAhB,gFAAgB;QAE3C,0DAAkB;QAAlB,gFAAkB;;6FDOjD,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;;;;;;ICOlE,iFAAgG;;;;IAAnD,yEAAa;;;IAD5D,yEACE;IAAA,gJAAgG;IAClG,4DAAM;;;IAD4B,0DAAW;IAAX,oFAAW;;;IAG3C,oEAAG;IAAA,2FAAgC;IAAA,4DAAI;;;ADAlC,MAAM,oBAAoB;IAM/B,YAAoB,eAA+B;QAA/B,oBAAe,GAAf,eAAe,CAAgB;QAH5C,aAAQ,GAAa,EAAE,CAAC,CAAC,qCAAqC;QAC9D,WAAM,GAAW,IAAI,EAAC,sEAAsE;QAGjG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,YAAyD,EAAC,EAAE;YAC7H,IAAG,YAAY,IAAE,IAAI,EAAE;gBACrB,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBAChD,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;aACnC;iBAAM;gBACL,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;aACpB;QACH,CAAC,CAAC;IACH,CAAC;IAEF,QAAQ;IACR,CAAC;IAED,mBAAmB,CAAC,MAAc;QAChC,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;IAED,WAAW;QACT,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;IACjC,CAAC;;wFA1BU,oBAAoB;oGAApB,oBAAoB;QCVjC,wEACE;QAAA,wEAAsG;QAA9E,wIAAS,wBAAoB,IAAI,CAAC,IAAC;QAA2C,oEAAG;QAAA,mEAAQ;QAAA,4DAAI;QACrH,4DAAK;QACL,wEAAwG;QAAhF,wIAAS,wBAAoB,KAAK,CAAC,IAAC;QAA4C,oEAAG;QAAA,+DAAI;QAAA,4DAAI;QACnH,4DAAK;QACP,4DAAK;QACL,gHAEM;QACN,4MAEc;;;QAVgD,0DAA6B;QAA7B,sJAA6B;QAE5B,0DAA8B;QAA9B,uJAA8B;QAGpE,0DAAsB;QAAtB,qFAAsB;;6FDIlC,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACP;AAGL;;;;AAKxB,MAAM,WAAW;IAMtB,YAAoB,MAAa,EAAU,UAAqB;QAA5C,WAAM,GAAN,MAAM,CAAO;QAAU,eAAU,GAAV,UAAU,CAAW;QAJxD,WAAM,GAA0C,EAAC,KAAK,EAAE,IAAI,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,gCAAgC;QAC7G,sBAAiB,GAAG,IAAI,4CAAO,EAAU,CAAC,CAAC,qBAAqB;QAChE,sBAAiB,GAAG,IAAI,4CAAO,EAAW,CAAC,CAAC,qCAAqC;QAGtF,wDAAwD;QACxD,IAAI,KAAK,GAAO,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACtB,IAAG,KAAK,EAAE;YACR,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC1B,IAAI,mBAAmB,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;YAC7D,IAAG,mBAAmB,IAAI,mBAAmB,GAAG,IAAI,EAAE;gBACpD,IAAI,CAAC,MAAM,EAAE,CAAC;aACf;iBAAM;gBACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACvB;SACF;IACH,CAAC;IAEM,KAAK,CAAC,MAAa,EAAC,QAAe;QACxC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAC,EAAE;YAC1D,IAAI,CAAC,SAAS,CAAC,GAAG,EAAC,IAAI,CAAC,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9B,CAAC,EAAC,CAAC,GAAG,EAAC,EAAE;YACP,IAAI,YAAY,GAAG,+BAA+B,CAAC;YACnD,IAAG,OAAO,GAAG,CAAC,KAAK,IAAE,QAAQ,EAAE;gBAC7B,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC;aAC1B;YACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,QAAQ,CAAC,MAAa,EAAC,QAAe;QAC3C,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,MAAM,EAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAC,EAAE;YAChE,IAAI,CAAC,SAAS,CAAC,GAAG,EAAC,IAAI,CAAC,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9B,CAAC,EAAC,CAAC,GAAG,EAAC,EAAE;YACP,IAAI,YAAY,GAAG,+BAA+B,CAAC;YACnD,IAAG,OAAO,GAAG,CAAC,KAAK,IAAE,QAAQ,EAAE;gBAC7B,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC;aAC1B;YACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,SAAS,CAAC;YACb,KAAK,EAAE,IAAI;YACX,EAAE,EAAE,IAAI;SACT,EAAC,IAAI,CAAC,CAAC;QACR,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAClC,CAAC;IAEO,sBAAsB,CAAC,IAAmB;QAChD,IAAG,IAAI,CAAC,KAAK,KAAK,IAAI;YAAE,OAAO,IAAI,CAAC;QACpC,MAAM,OAAO,GAA0B,0DAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9D,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS;YAAE,OAAO,IAAI,CAAC;QAC3C,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;IACd,CAAC;IAGO,SAAS,CAAC,IAAuC,EAAC,YAAoB,KAAK;QACjF,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;QAC7B,IAAG,SAAS,EAAE;YACZ,YAAY,CAAC,OAAO,CAAC,OAAO,EAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;SACpD;QACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;IAC3B,CAAC;;sEA5EU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACD;AACR;AACiB;AACH;AACU;;;AAEtE,wBAAwB;AACxB,MAAM,MAAM,GAAW;IACrB,EAAC,IAAI,EAAC,MAAM,EAAC,WAAW,EAAC,CAAC,0DAAS,CAAC,EAAC,SAAS,EAAC,kEAAa,EAAC;IAC7D,EAAC,IAAI,EAAC,SAAS,EAAC,WAAW,EAAC,CAAC,0DAAS,CAAC,EAAC,SAAS,EAAC,2EAAgB,EAAC;IACnE,EAAC,IAAI,EAAC,QAAQ,EAAC,WAAW,EAAC,CAAC,0DAAS,CAAC,EAAC,SAAS,EAAC,wEAAe,EAAE,QAAQ,EAAE;YAC1E,EAAC,IAAI,EAAC,KAAK,EAAC,WAAW,EAAC,CAAC,0DAAS,CAAC,EAAC,SAAS,EAAC,kFAAgB,EAAC;SAChE,EAAC;IACF,EAAC,IAAI,EAAC,IAAI,EAAC,UAAU,EAAC,UAAU,EAAC;CAClC,CAAC;AAOK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAJlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAGX,gBAAgB,uFAHjB,4DAAY;6FAGX,gBAAgB;cAL5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACrBD;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { MessagesService } from '../services/messages.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-manage',\r\n  templateUrl: './manage.component.html',\r\n  styleUrls: ['./manage.component.css']\r\n})\r\nexport class ManageComponent implements OnInit {\r\n\r\n\r\n  constructor(private messagesService:MessagesService) { \r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.messagesService.getMessages();\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid\">\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-3 fullHeight messageList\">\r\n      <app-message-list></app-message-list>\r\n    </div>\r\n    <div class=\"col-sm-9 message fullHeight col-xs-12\" [ngClass]=\"{'messageActive':messageOutlet.isActivated}\">\r\n      <router-outlet #messageOutlet=\"outlet\"></router-outlet>\r\n      <div *ngIf=\"!messageOutlet.isActivated\" class=\"selectMessage\">\r\n        <img src=\"../../assets/images/mail.png\" alt=\"\">\r\n        <p>please select message</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Message } from '../manage/message.model';\r\nimport { MessagesService } from '../services/messages.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-compose',\r\n  templateUrl: './compose.component.html',\r\n  styleUrls: ['./compose.component.css']\r\n})\r\n\r\nexport class ComposeComponent implements OnInit,OnDestroy {\r\n\r\n  public formErrors:String[] = []; // defines the form errors list.\r\n  @ViewChild('messageForm',{read:NgForm}) messageForm:any; // defines the message form object\r\n  private messageSentSub:Subscription; // sent message status subscriber\r\n  public sendInProcess:boolean = false; // responsible for form buttons accessibility by send status\r\n\r\n  constructor(private messageService:MessagesService) {\r\n    this.messageSentSub = this.messageService.sentMessageStatusEmitter.subscribe((status:string)=> { // sets subscriber for the sent message status\r\n      if(!status) {\r\n        this.clearForm();\r\n      } else {\r\n        this.formErrors.push(status);\r\n      }\r\n      this.sendInProcess = false;\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onSubmit():void { // validates the form propriety and calls to write message or display form errors if any\r\n    if(!this.sendInProcess) {\r\n      this.formErrors = [];\r\n      let form:Message = this.messageForm.form.value;\r\n      if(isNaN(form.receiverId)) {\r\n        this.formErrors.push(\"IDs should be a number\");\r\n      } else if(!Number.isInteger(form.receiverId)) {\r\n        this.formErrors.push(\"ID should be an integer\");\r\n      } else if(form.receiverId<1) {\r\n        this.formErrors.push(\"ID should be with positive value\");\r\n      } else if(String(form.receiverId).length>16) {\r\n        this.formErrors.push(\"ID's letter length should be less then 17\");\r\n      }\r\n      if(!form.subject || form.subject.trim()==\"\") {\r\n        this.formErrors.push(\"Subject should not be empty\");\r\n      }\r\n      if(!form.message || form.message.trim()==\"\") {\r\n        this.formErrors.push(\"Message should not be empty\");\r\n      }\r\n      if(!this.formErrors.length) {\r\n        this.sendInProcess = true;\r\n        this.messageService.writeMessage(form);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearForm():void { // clears the form inputs and errors\r\n    this.formErrors = [];\r\n    this.messageForm.reset();\r\n  }\r\n\r\n  ngOnDestroy():void { // Removes custom subscriber to avoid multiple subscription\r\n    this.messageSentSub.unsubscribe();\r\n  }\r\n\r\n\r\n}\r\n","<form ngNativeValidate (ngSubmit)=\"onSubmit()\" #messageForm=\"ngForm\">\r\n  <legend>New message</legend>\r\n  <div class=\"form-group\">\r\n    <label for=\"receiverId\">Receiver ID</label>\r\n    <input type=\"number\" min=\"0\" step=\"1\" required ngModel name=\"receiverId\" class=\"form-control\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"subject\">Subject</label>\r\n    <input type=\"text\" required ngModel name=\"subject\" class=\"form-control\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"Message\">Message</label>\r\n    <textarea required ngModel name=\"message\" class=\"form-control\"></textarea>\r\n  </div>\r\n  <div class=\"errorAlertsHolder\" *ngIf=\"formErrors.length\">\r\n    <p class=\"alert alert-danger\" *ngFor=\"let i of formErrors\">{{i}}</p>\r\n  </div>\r\n  <button type=\"button\" class=\"btn btn-danger\" (click)=\"clearForm()\" [disabled]=\"sendInProcess\">Clear</button>\r\n  <button type=\"submit\" class=\"btn btn-success pull-right\" [disabled]=\"sendInProcess\">\r\n    <span *ngIf=\"!sendInProcess; else loader\">Submit</span>\r\n    <ng-template #loader>\r\n      <div class=\"loader\"></div>\r\n    </ng-template>\r\n  </button>\r\n</form>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessagesService } from 'src/app/services/messages.service';\r\nimport { Message } from '../message.model';\r\n\r\n@Component({\r\n  selector: 'app-message',\r\n  templateUrl: './message.component.html',\r\n  styleUrls: ['./message.component.css']\r\n})\r\nexport class MessageComponent implements OnInit,OnDestroy {\r\n  \r\n  public message:Message = {subject:'',message:'',senderId:0,receiverId:0}; // defines the message data\r\n  private deletedMessageSub:Subscription; // message subscriber\r\n  public messageStatus:boolean | undefined; // defines the message status (true = received, false = sent)\r\n\r\n  constructor(private messagesService:MessagesService, private router:Router,private route:ActivatedRoute) {\r\n    this.deletedMessageSub = this.messagesService.deletedMessageEmitter.subscribe((messageId)=>{ // Sets subscriber for deleted message update. \r\n      if(this.message.messageId==messageId) {\r\n        this.routeBack();\r\n      }\r\n    })\r\n   }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe((params:Params)=>{ // sets route params subscriber for message display\r\n      let messageData = this.messagesService.getMessageById(+params.id);\r\n      if(messageData) {\r\n        this.message = messageData;\r\n      } else {\r\n        this.routeBack();\r\n      }\r\n    })\r\n    this.messageStatus = this.messagesService.messageStatus;\r\n  }\r\n\r\n  routeBack() :void { // routes one level backwards\r\n    this.router.navigate(['../'],{relativeTo: this.route});\r\n  }\r\n\r\n  ngOnDestroy() :void { // Removes custom subscriber to avoid multiple subscription\r\n    this.deletedMessageSub.unsubscribe();\r\n  }\r\n\r\n}\r\n","<div class=\"backgroundLayer\" (click)=\"routeBack()\"></div>\r\n<div class=\"panel panel-default\">\r\n  <div class=\"panel-heading\">\r\n    <span class=\"glyphicon glyphicon-remove pull-right\" aria-hidden=\"true\" (click)=\"routeBack()\"></span>\r\n    <h3 class=\"panel-title\">{{message.subject}}</h3>\r\n  </div>\r\n  <div class=\"panel-body\">\r\n    <p>{{messageStatus ? 'From' : 'To'}}: {{messageStatus ? message.senderId : message.receiverId}}</p>\r\n    <p>{{message.message}}</p>\r\n  </div>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './services/auth.service';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService:AuthService) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> { // adds user token to the API request headers if exists.\r\n    if(this.authService.token) {\r\n      let tokenHeader = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${this.authService.token}`\r\n        }\r\n      });\r\n      return next.handle(tokenHeader);\r\n    }\r\n    return next.handle(request);\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { MessagesService } from 'src/app/services/messages.service';\r\n\r\n@Component({\r\n  selector: 'app-message-item',\r\n  templateUrl: './message-item.component.html',\r\n  styleUrls: ['./message-item.component.css']\r\n})\r\nexport class MessageItemComponent implements OnInit {\r\n\r\n  @Input() message:any; // inherits message data from parent\r\n  @Input() status:boolean = true; //inherits message status from parent (true = received, false = sent).\r\n\r\n  constructor(private messagesService:MessagesService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  deleteMessage(event:Event):void { // calls to delete message by message id\r\n    event.stopPropagation();\r\n    this.messagesService.deleteMessage(this.message.messageId);\r\n  }\r\n}\r\n","<div class=\"list-group-item clearfix\" [routerLink]=\"message.messageId\" routerLinkActive=\"active\">\r\n  <div>\r\n    <h5 class=\"mb-1\">{{message.subject}}</h5>\r\n    <small class=\"text-muted\">{{message.creationDate | date:'short'}}</small>\r\n  </div>\r\n  <small class=\"text-muted\">{{status ? 'From' : 'To'}}:{{status ? message.senderId : message.receiverId}}</small>\r\n  <span class=\"glyphicon glyphicon-trash pull-right\" aria-hidden=\"true\" (click)=\"deleteMessage($event)\"></span>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Message } from '../manage/message.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n\r\n  private messagesEndPoint:string = 'messages'; // Sets the messages API endpoint\r\n  private usersEndPoint:string = 'users';// Sets the users API endpoint\r\n\r\n  constructor(private http:HttpClient) {}\r\n\r\n  public writeMessage(messageObj:Message) { // Returns write message API request\r\n    return this.http.post<any>(`${this.messagesEndPoint}/writeMessage`,messageObj);\r\n  }\r\n\r\n  public deleteMessage(messageData:{}) { // Returns delete message API request\r\n    return this.http.delete<any>(`${this.messagesEndPoint}/deleteMessage`,{params:messageData});\r\n  } \r\n\r\n  public getMessages() { // Returns get messages API request\r\n    return this.http.get<any>(`${this.messagesEndPoint}/getMessages`);\r\n  }\r\n\r\n  public loginUser(id:number,password:string) { // returns login API request\r\n    return this.http.post<any>(`${this.usersEndPoint}/login`,{\r\n      id:id,\r\n      password:password\r\n    })\r\n  }\r\n\r\n  public registerNewUser(id:number,password:string) { // returns register new user API request.\r\n    return this.http.post<any>(this.usersEndPoint,{\r\n      id: id,\r\n      password: password\r\n    })\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Message } from '../manage/message.model';\r\nimport { ApiService } from './api.service';\r\nimport { Subject } from 'rxjs';\r\nimport Swal from 'sweetalert2';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessagesService {\r\n\r\n  private messages:{\"sent\":Message[],\"received\":Message[]} = {\"sent\":[],\"received\":[]};   // defines the user messages list ordered by received and sent\r\n  private status:boolean = true; // defines the status of the current displaying messages (true = received, false = sent).\r\n  public messagesEmitter = new Subject<{\"messages\":Message[],\"status\":boolean}>(); // emits the list of the requested messages and their status.\r\n  public deletedMessageEmitter = new Subject<number>(); // emits the message id when the message is deleted.\r\n  public sentMessageStatusEmitter = new Subject<string>(); // emits the sent message status (success or failure)\r\n\r\n  constructor(private apiService:ApiService, private authService:AuthService) { }\r\n\r\n  public writeMessage(messageObj:Message):void { // Calls the server to add the written message, then displays success or failure message by the server response.\r\n    this.apiService.writeMessage(messageObj).subscribe((result)=> {\r\n      this.sentMessageStatusEmitter.next('');\r\n      Swal.fire({ //opens sweetAlert 2 modal\r\n        // sweetAlert2 modal design definition\r\n        position: 'top-end',\r\n        icon: 'success',\r\n        title: 'Your message has been sent',\r\n        showConfirmButton: false,\r\n        timer: 2000\r\n      })\r\n    },(error)=> {\r\n      let errorMessage = 'Something went wrong...';\r\n      if(error.error.logout) {\r\n        this.authService.logout();\r\n        this.displayServerError(error.error.message);\r\n      } else {\r\n        if(typeof error.error=='string') {\r\n            errorMessage = error.error;\r\n        }\r\n        this.sentMessageStatusEmitter.next(errorMessage);\r\n      }\r\n    })\r\n  }\r\n\r\n  public deleteMessage(messageId:number):void { // Calls the server to delete message by message ID, then displays success or failure message by the server response.\r\n    Swal.fire({//opens sweetAlert 2 modal\r\n      // sweetAlert2 modal design definition\r\n      title: 'Are you sure?',\r\n      text: \"You won't be able to revert this!\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        let messageObj = {\r\n          messageId: messageId,\r\n          status: this.status ? 'received' : 'sent'\r\n        }\r\n        this.apiService.deleteMessage(messageObj).subscribe((res) => {\r\n          let messageIndex = this.messages[messageObj.status as keyof {\"sent\":Message[],\"received\":Message[]}].findIndex(message => message.messageId==messageId);\r\n          if(messageIndex!=-1) {\r\n            this.messages[messageObj.status as keyof {\"sent\":Message[],\"received\":Message[]}].splice(messageIndex,1);\r\n            this.getMessagesByStatus(this.status);\r\n            this.deletedMessageEmitter.next(messageId);\r\n            Swal.fire({//opens sweetAlert 2 modal\r\n              // sweetAlert2 modal design definition\r\n              position: 'top-end',\r\n              icon: 'success',\r\n              title: 'Message deleted successfully',\r\n              showConfirmButton: false,\r\n              timer: 2000\r\n            })\r\n          }\r\n        },(err)=>{\r\n          let errorMessage = 'Something went wrong...';\r\n          if(err.error.logout) {\r\n            this.authService.logout();\r\n            errorMessage = err.error.message;\r\n          } else if(typeof err.error=='string') {\r\n            errorMessage = err.error;\r\n          }\r\n          this.displayServerError(errorMessage);\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  public getMessages():void { // Calls the server to get the user messages, then emits the list that returned from the server.\r\n    this.apiService.getMessages().subscribe((result)=>{\r\n        this.messages = result;\r\n        this.getMessagesByStatus(true);\r\n      },(err)=>{\r\n        let errorMessage:string = 'Something went wrong';\r\n        if(err.error.logout) {\r\n          this.authService.logout();\r\n          errorMessage = err.error.message;\r\n        } else if(typeof err.error=='string') {\r\n          errorMessage = err.error;\r\n        }\r\n        this.displayServerError(errorMessage);\r\n    });\r\n  }\r\n\r\n  public getMessagesByStatus(status:boolean):void { // returns the current saved messages by status (true = received, false = sent)\r\n    this.status = status;\r\n    let messageStatus:string = status ? 'received' : 'sent';\r\n    let messagesData = {\r\n      messages: this.messages[messageStatus as keyof {\"sent\":Message[],\"received\":Message[]}].slice(),\r\n      status: status\r\n    }\r\n    this.messagesEmitter.next(messagesData);\r\n  }\r\n\r\n  public getMessageById(messageId:number) { // returns a message by message ID from the current saved messages\r\n    let messageStatus:string = this.status ? 'received' : 'sent';\r\n    return this.messages[messageStatus as keyof {\"sent\":Message[],\"received\":Message[]}].find(message => message.messageId==messageId);\r\n  }\r\n\r\n  private displayServerError(message:string):void { // displays sweetAlert2 error modal.\r\n    Swal.fire({//opens sweetAlert 2 modal\r\n      // sweetAlert2 modal design definition\r\n      icon: 'error',\r\n      title: 'Oops...',\r\n      text: message\r\n    })\r\n  }\r\n\r\n  get messageStatus():boolean { // returns the current messages status (true = received, false = sent).\r\n    return this.status;\r\n  }\r\n  \r\n}","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.css']\r\n})\r\nexport class AuthComponent implements OnInit, OnDestroy {\r\n\r\n  @ViewChild('userForm',{read:NgForm}) userForm:any;\r\n  \r\n  isLogin:boolean = true; // defines the form role (true - login, false - register).\r\n  authInProgress:boolean = false; // define if auth request has been sent for form buttons accessibility.\r\n  formErrors:string[] = []; // array of the form errors.\r\n  errorSub:Subscription; // errors subscriber.\r\n\r\n  constructor(private authService:AuthService) {\r\n    this.errorSub = this.authService.authErrorsEmitter.subscribe((errorMsg:string)=>{ // sets subscriber for the form errors.\r\n      this.clearForm();\r\n      this.formErrors.push(errorMsg);\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit():void { // validates the form propriety and calls to login / register new user or display form errors if any\r\n    if(!this.authInProgress) {\r\n      this.formErrors = [];\r\n      this.authInProgress = true;\r\n      let form:{userId:number,password:string,passwordConfirmation?:string} = this.userForm.form.value;\r\n      if(isNaN(form.userId)) {\r\n        this.formErrors.push('ID should be a number');\r\n      } else if(!Number.isInteger(form.userId) || form.userId<1) {\r\n        this.formErrors.push('ID should be integer and greater then 0');\r\n      } else if(String(form.userId).length>16) {\r\n        this.formErrors.push(\"ID must be less then 17 characters\");\r\n      }\r\n      if(form.password.trim()=='') {\r\n        this.formErrors.push('Password is required');\r\n      } else if(!this.isLogin){\r\n        if(!this.isLogin && (!form.passwordConfirmation || form.passwordConfirmation!=form.password)) {\r\n          this.formErrors.push('Passwords should be matched');\r\n        }\r\n        if(!form.password.match(/[0-9]/g)) {\r\n          this.formErrors.push('Password should contain at least 1 digit');\r\n        }\r\n        if(!form.password.match(/[A-Z]/g)) {\r\n          this.formErrors.push('Password should contain at least 1 uppercase letter');\r\n        }\r\n        if(!form.password.match(/[a-z]/g)) {\r\n          this.formErrors.push('Password should contain at least 1 lowercase letter');\r\n        }\r\n        if(form.password.length<8) {\r\n          this.formErrors.push('Password should be at least 8 characters');\r\n        }\r\n      }\r\n      if(!this.formErrors.length) {\r\n        if(this.isLogin) {\r\n          this.authService.login(form.userId,form.password);\r\n        } else {\r\n          this.authService.register(form.userId,form.password);\r\n        }\r\n      } else {\r\n        this.authInProgress = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  onSwitch():void { // switches between login and register forms.\r\n    this.isLogin = !this.isLogin;\r\n    this.formErrors = [];\r\n  }\r\n\r\n  clearForm():void { // clears the form inputs and data\r\n    this.formErrors = [];\r\n    this.authInProgress = false;\r\n    this.userForm.controls['password'].reset();\r\n    if(!this.isLogin) {\r\n      this.userForm.controls['passwordConfirmation'].reset();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy():void { // Removes custom subscriber to avoid multiple subscription\r\n    this.errorSub.unsubscribe();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","<form ngNativeValidate (ngSubmit)=\"onSubmit()\" #userForm=\"ngForm\">\r\n  <legend>{{isLogin ? 'Login' : 'Register'}}</legend>\r\n  <div class=\"form-group\">\r\n    <label for=\"userId\">ID</label>\r\n    <input type=\"number\" min=\"1\" step=\"1\" required ngModel name=\"userId\" class=\"form-control\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"password\">Password</label>\r\n    <input type=\"password\" required ngModel name=\"password\" class=\"form-control\">\r\n  </div>\r\n  <div class=\"form-group\" *ngIf=\"!isLogin\">\r\n    <label for=\"passwordConfirmation\">Password confirmation</label>\r\n    <input type=\"password\" required ngModel name=\"passwordConfirmation\" class=\"form-control\">\r\n  </div>\r\n  <div class=\"errorAlertsHolder\" *ngIf=\"formErrors.length\">\r\n    <p class=\"alert alert-danger\" *ngFor=\"let i of formErrors\">{{i}}</p>\r\n  </div>\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"onSwitch()\" [disabled]=\"authInProgress\">Switch to\r\n    {{isLogin?'register':'login'}}</button>\r\n  <button type=\"submit\" class=\"btn btn-success pull-right\" [disabled]=\"authInProgress\">\r\n    <span *ngIf=\"!authInProgress; else loader\">Submit</span>\r\n    <ng-template #loader>\r\n      <div class=\"loader\"></div>\r\n    </ng-template>\r\n  </button>\r\n</form>\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private authService:AuthService,private router:Router) { }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    // guard routes by user status (logged or not).\r\n    let currentRoute = route.routeConfig?.path;\r\n    let userLogged = this.authService.token;\r\n    if(userLogged) {\r\n      if(currentRoute=='auth') {\r\n        return this.router.createUrlTree(['/compose']);\r\n      } else {\r\n        return true;\r\n      }\r\n    } else {\r\n      if(currentRoute=='auth') {\r\n        return true;\r\n      } else {\r\n        return this.router.createUrlTree(['/auth']);\r\n      }\r\n    }\r\n  }\r\n  \r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'messaging-system';\r\n\r\n  constructor() {\r\n  }\r\n}\r\n","<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { ComposeComponent } from './compose/compose.component';\r\nimport { ManageComponent } from './manage/manage.component';\r\nimport { MessageListComponent } from './manage/message-list/message-list.component';\r\nimport { MessageComponent } from './manage/message/message.component';\r\nimport { MessageItemComponent } from './manage/message-list/message-item/message-item.component';\r\nimport { AuthComponent } from './auth/auth.component';\r\n\r\nimport { ApiService } from './services/api.service';\r\nimport { MessagesService } from './services/messages.service';\r\nimport { AuthService } from './services/auth.service';\r\nimport { TokenInterceptor } from './token.interceptor';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HeaderComponent,\r\n    ComposeComponent,\r\n    ManageComponent,\r\n    MessageListComponent,\r\n    MessageComponent,\r\n    MessageItemComponent,\r\n    AuthComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: [\r\n    ApiService,\r\n    MessagesService,\r\n    AuthService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi: true\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit, OnDestroy {\r\n\r\n  private userStatusSub:Subscription; // user status subscriber.\r\n  public userStatus:boolean = false; // current user status.\r\n\r\n  constructor(private authService:AuthService,private router:Router) {\r\n    // updates user status.\r\n    this.userStatus = !!authService.token;\r\n    this.userStatusSub = this.authService.userStatusEmitter.subscribe((status:boolean) => {\r\n      this.userStatus = status;\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  logout():void {\r\n    this.authService.logout();\r\n  }\r\n\r\n  ngOnDestroy():void { // Removes custom subscriber to avoid multiple subscription\r\n    this.userStatusSub.unsubscribe();\r\n  }\r\n\r\n}\r\n","<nav class=\"navbar navbar-inverse navbar-static-top\" role=\"navigation\">\r\n  <span class=\"glyphicon glyphicon-menu-hamburger\" aria-hidden=\"true\" *ngIf=\"userStatus\"></span>\r\n\r\n  <ul class=\"nav navbar-nav authenticated\" *ngIf=\"userStatus; else authTab\">\r\n    <li [ngClass]=\"{'active':compose.isActive}\">\r\n      <a routerLink=\"compose\" routerLinkActive #compose='routerLinkActive'>Compose message</a>\r\n    </li>\r\n    <li [ngClass]=\"{'active':manage.isActive}\">\r\n      <a routerLink=\"manage\" routerLinkActive #manage='routerLinkActive'>Manage messages</a>\r\n    </li>\r\n    <li>\r\n      <a (click)=\"logout()\">log out</a>\r\n    </li>\r\n  </ul>\r\n  \r\n  \r\n  <ng-template #authTab>\r\n    <ul class=\"nav navbar-nav auth\">\r\n      <li class=\"active\">\r\n        <a>Authentication</a>\r\n      </li>\r\n    </ul>\r\n  </ng-template>\r\n</nav>","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { MessagesService } from 'src/app/services/messages.service';\r\nimport { Message } from '../message.model';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-message-list',\r\n  templateUrl: './message-list.component.html',\r\n  styleUrls: ['./message-list.component.css']\r\n})\r\nexport class MessageListComponent implements OnInit, OnDestroy {\r\n\r\n  private messagesSub:Subscription; // message list subscriber\r\n  public messages:Message[] = []; // defines the received messages list\r\n  public status:boolean = true // defines the current messages status (true = received, false = sent)\r\n\r\n  constructor(private messagesService:MessagesService) {\r\n    this.messagesSub = this.messagesService.messagesEmitter.subscribe((messagesData:{\"messages\":Message[],\"status\":boolean}|null)=>{ // Sets subscriber for message list update.\r\n      if(messagesData!=null) {\r\n        this.messages = messagesData.messages.reverse();\r\n        this.status = messagesData.status;\r\n      } else {\r\n        this.messages = [];\r\n      }\r\n    })\r\n   }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  getMessagesByStatus(status:boolean):void { // calls to get messages by status (true = received, false = sent).\r\n    this.messagesService.getMessagesByStatus(status);\r\n  }\r\n\r\n  ngOnDestroy():void { // Removes custom subscriber to avoid multiple subscription\r\n    this.messagesSub.unsubscribe();\r\n  }\r\n\r\n}","<ul class=\"nav nav-tabs\">\r\n  <li role=\"presentation\" (click)=\"getMessagesByStatus(true)\" [ngClass]=\"{'active':status}\" class=\"tab\"><a>Received</a>\r\n  </li>\r\n  <li role=\"presentation\" (click)=\"getMessagesByStatus(false)\" [ngClass]=\"{'active':!status}\" class=\"tab\"><a>Sent</a>\r\n  </li>\r\n</ul>\r\n<div class=\"list-group\" *ngIf=\"messages.length;else noneMessages\">\r\n  <app-message-item *ngFor=\"let i of messages\" [message]=\"i\" [status]=\"status\"></app-message-item>\r\n</div>\r\n<ng-template #noneMessages>\r\n  <p>There are no messages to display</p>\r\n</ng-template>","import { Injectable } from '@angular/core';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { Router } from '@angular/router';\r\nimport { ApiService } from './api.service';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private logged:{token:null|string,userId:null|number} = {token: null,userId: null}; // defines the logged user data.\r\n  public authErrorsEmitter = new Subject<string>(); // emits auth errors.\r\n  public userStatusEmitter = new Subject<boolean>(); // emits user status (logged or not).\r\n\r\n  constructor(private router:Router, private apiService:ApiService) {\r\n    // manages the user data and status on application start\r\n    let _sess:any = localStorage.getItem('_sess');\r\n    let date = new Date();\r\n    if(_sess) {\r\n      _sess = JSON.parse(_sess);\r\n      let tokenExpirationDate = this.getTokenExpirationDate(_sess);\r\n      if(tokenExpirationDate && tokenExpirationDate < date) {\r\n        this.logout();\r\n      } else {\r\n        this.setLogged(_sess);\r\n      }\r\n    }\r\n  }\r\n\r\n  public login(userId:number,password:string) { // calls the server to login. if succeed, calls to save the user data. if failed, displays the error. \r\n    this.apiService.loginUser(userId,password).subscribe((res)=>{\r\n      this.setLogged(res,true);\r\n      this.router.navigate(['/']);\r\n    },(err)=>{\r\n      let errorMessage = 'Oops, something went wrong...';\r\n      if(typeof err.error=='string') {\r\n        errorMessage = err.error;\r\n      }\r\n      this.authErrorsEmitter.next(errorMessage);\r\n    });\r\n  }\r\n\r\n  public register(userId:number,password:string) { // calls the server to register new user. if succeed, calls to save the user data. if failed, displays the error. \r\n    this.apiService.registerNewUser(userId,password).subscribe((res)=>{\r\n      this.setLogged(res,true);\r\n      this.router.navigate(['/']);\r\n    },(err)=>{\r\n      let errorMessage = 'Oops, something went wrong...';\r\n      if(typeof err.error=='string') {\r\n        errorMessage = err.error;\r\n      }\r\n      this.authErrorsEmitter.next(errorMessage);\r\n    });\r\n  }\r\n  \r\n  public logout() { // calls to remove user data and navigate back to auth page.\r\n    this.setLogged({\r\n      token: null,\r\n      id: null\r\n    },true);\r\n    this.router.navigate(['/auth']);\r\n  }\r\n\r\n  private getTokenExpirationDate(sess:{token:string}): Date|null { // returns the token expiration date.\r\n    if(sess.token === null) return null;\r\n    const decoded:{exp:number|undefined} = jwt_decode(sess.token);\r\n    if (decoded.exp === undefined) return null;\r\n    const date = new Date(0); \r\n    date.setUTCSeconds(decoded.exp);\r\n    return date;\r\n  }\r\n\r\n\r\n  private setLogged(sess:{token:string|null,id:number|null},storeSess:boolean = false) { // sets the user data.\r\n    this.logged.token = sess.token;\r\n    this.logged.userId = sess.id;\r\n    if(storeSess) {\r\n      localStorage.setItem('_sess',JSON.stringify(sess));\r\n    }\r\n    this.userStatusEmitter.next(!!this.logged.token);\r\n  }\r\n\r\n  get token():null|string { // returns the token\r\n    return this.logged.token;\r\n  } \r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthComponent } from './auth/auth.component';\r\nimport { AuthGuard } from './auth/auth.guard';\r\nimport { ComposeComponent } from './compose/compose.component';\r\nimport { ManageComponent } from './manage/manage.component';\r\nimport { MessageComponent } from './manage/message/message.component';\r\n\r\n// App routes definition\r\nconst routes: Routes = [\r\n  {path:'auth',canActivate:[AuthGuard],component:AuthComponent},\r\n  {path:'compose',canActivate:[AuthGuard],component:ComposeComponent},\r\n  {path:'manage',canActivate:[AuthGuard],component:ManageComponent, children: [\r\n    {path:':id',canActivate:[AuthGuard],component:MessageComponent}\r\n  ]},\r\n  {path:'**',redirectTo:'/compose'}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule { \r\n  \r\n}","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}